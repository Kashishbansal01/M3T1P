#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <mpi.h>

using namespace std;

int main(int argc, char** argv) 
{
    int N;
    int rank, size;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        cout << "Enter matrix size N: ";
        cin >> N;
    }

    MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);

    //Allocate memory for matrices A, B, and C
    int **A, **B, **C;
    int *A_row, *B_row, *C_row;
    int block_size = N / size;
    A = new int*[block_size];
    B = new int*[block_size];
    C = new int*[block_size];
    A_row = new int[N * block_size];
    B_row = new int[N * block_size];
    C_row = new int[N * block_size];

    for (int i = 0; i < block_size; i++)
    {
        A[i] = &A_row[i * N];
        B[i] = &B_row[i * N];
        C[i] = &C_row[i * N];
    }

    //Initialize matrices A and B with random values
    srand(time(NULL) + rank); // Use rank to seed the random number generator
    for (int i = 0; i < block_size; i++)
    {
        for (int j = 0; j < N; j++)
        {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
        }
    }

    //Perform matrix multiplication C = A * B
    auto start = chrono::steady_clock::now();

    // Scatter matrix A to all processes
    MPI_Scatter(A_row, N * block_size, MPI_INT, MPI_IN_PLACE, N * block_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Broadcast matrix B to all processes
    MPI_Bcast(B_row, N * block_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Perform local matrix multiplication
    for (int i = 0; i < block_size; i++)
    {
        for (int j = 0; j < N; j++)
        {
            C[i][j] = 0;
            for (int k = 0; k < N; k++)
            {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    // Gather the results from all processes
    MPI_Gather(C_row, N * block_size, MPI_INT, C_row, N * block_size, MPI_INT, 0, MPI_COMM_WORLD);

    auto end = chrono::steady_clock::now();
    auto diff = end - start;
    double time = chrono::duration<double, milli>(diff).count();

    if (rank == 0) {
        // Write matrix C to file
        ofstream outfile("output.txt");
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                outfile << C_row[i * N + j] << " ";
            }
            outfile << endl;
        }
        outfile.close();

        // Free memory allocated for matrices A, B, And C
       
delete[] A;
delete[] B;
delete[] C;
delete[] A_row;
delete[] B_row;
delete[] C_row;
    cout << "Matrix multiplication of size " << N << "x" << N << " took " << time << " ms." << endl;
}

MPI_Finalize();
return 0;
}
